{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ethos Project","text":""},{"location":"#overview","title":"Overview","text":"<p>This site hosts the documentation for the heat early warning system developed by the Ethos Project at Griffith University with funding provided by the Wellcome Trust (grant 224709/Z/21/Z: 'Individualised heat-health early warning systems: A novel digital solution', held by S. Rutherford, A. J. E. Bach, S. Binnewies).</p> <p>The Ethos Project aims to provide a heat Early Warning System (EWS) for vulnerable populations, such as older adults. It achieves this through real-time monitoring of ambient conditions (ambient temperature and relative humidity) using sensors placed around a user's place of residence. These sensors then transmit that information to a base station which then processes and displays that data as well as forwards it to the server. There is also an optional smartphone app developed by the Griffith App Factory which can act as an alternative User Interface (UI) to the base station by connecting to the server.</p> <p> Photo of the Ethos system. From left to right: indoor sensor, outdoor sensor, base station, indoor sensor x2.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The project is largely comprised of four main components:</p> <ol> <li>Ethos Base Station - This is the heart of the system and is responsible for: receiving transmitted sensor information, processing that information to calculate risk based on user information and forwarding the sensor/risk information to the server.</li> <li>Ethos Temperature Sensor - These are the individual sensors which read the ambient temperature and relative humidity and transmit that information to the base station using radio communication.</li> <li>Ethos Server - This receives and stores the user's temperature/humidity data in a database. It is also responsible for sending surveys during heatwaves, as well as storing the survey answers. All stored data is de-identified.</li> <li>Ethos Smartphone App (optional) - An optional smartphone app which can connect to the server and act as a UI similar to the base station.</li> </ol> <pre><code>graph TD\n    %% External Elements\n    twilio[Twilio]\n\n    %% Ethos-temperature-sensor\n    subgraph ETS [Ethos-temperature-sensor]\n        direction TB\n        sht45[(\"SHT45 Sensor\")]\n        feather_m0[\"Feather M0 Board&lt;br&gt;(feather_m0.ino)\"]\n        radio_tx[\"RFM95 TX Module&lt;br&gt;(radio.cpp)\"]\n\n        sht45 -- Temperature/Humidity --&gt; feather_m0\n        feather_m0 -- Controls &amp; Reads --&gt; radio_tx\n    end\n\n    %% Ethos-base-station\n    subgraph EBS [Ethos-base-station]\n        direction TB\n        bs_python_radio[\"Python Radio Receiver&lt;br&gt;(python_radio)\"]\n        bs_js_ui[\"JavaScript UI&lt;br&gt;(javascript_ui)\"]\n\n        bs_python_radio -- \"Heat Risk Data&lt;br&gt;(WebSockets)\" --&gt; bs_js_ui\n    end\n\n    %% Ethos-server (Dockerized)\n    subgraph ES [Ethos-server]\n        direction TB\n        srv_nginx[\"Nginx&lt;br&gt;(Reverse Proxy, SSL Termination)\"]\n        srv_certbot[\"Certbot&lt;br&gt;(SSL Certificates)\"]\n        srv_couchdb[(\"CouchDB&lt;br&gt;(Database)\")]\n        srv_nodejs[\"Node.js Server&lt;br&gt;(Survey Logic, Notifications)\"]\n        srv_redis[(\"Redis&lt;br&gt;(Survey Flags)\")]\n\n        srv_certbot -.-&gt; srv_nginx\n        srv_nginx &lt;--&gt; srv_couchdb\n        srv_nginx &lt;--&gt; srv_nodejs\n        srv_nodejs &lt;--&gt; srv_redis\n    end\n\n    %% Ethos-smartphone-app (Optional)\n    subgraph EApp [\"User's smartphone\"]\n        direction TB\n        app_ui[\"Ethos iOS/Android App UI\"]\n    end\n\n    %% Connections\n    radio_tx -- \"Sensor Data via RFM95\" --&gt; bs_python_radio\n\n    bs_js_ui &lt;-- \"HTTPS\" --&gt; srv_nginx\n\n    srv_nodejs -- \"HTTPS\" --&gt; twilio\n    twilio -- \"Push/SMS Notifications\" --&gt; EApp\n\n    app_ui &lt;-- \"HTTPS\" --&gt; srv_nginx\n\n    %% Styling (Optional - for better visual distinction if supported well)\n    classDef sensor fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef basestation fill:#ccf,stroke:#333,stroke-width:2px;\n    classDef server_component fill:#9cf,stroke:#333,stroke-width:2px;\n    classDef app fill:#lightgreen,stroke:#333,stroke-width:2px;\n    classDef external fill:#eee,stroke:#333,stroke-width:2px;\n\n    class ETS,sht45,feather_m0,radio_tx sensor;\n    class EBS,bs_python_radio,bs_js_ui basestation;\n    class ES,srv_nginx,srv_certbot,srv_couchdb,srv_nodejs,srv_redis server_component;\n    class EApp,app_ui app;</code></pre>"},{"location":"#hardware","title":"Hardware","text":""},{"location":"#base-station","title":"Base Station","text":"Component Make Model SKU Website/Datasheet Processor RasperryPi RaspberryPi 4 Model B 4GB CE06425 RaspberryPi Store Radio Bonnet Adafruit LoRa Radio Bonnet with OLED - RFM95W @ 915MHz 4074 Adafruit Store Screen Waveshare 8DP-CAPLCD 23741 Waveshare Store Speakers/Soundcard Yahboom USB sound card and speaker for Raspberry Pi/Jetson/RDK series board 6000301288 Yahboom Store"},{"location":"#temperature-sensors","title":"Temperature Sensors","text":"Component Make Model SKU Website/Datasheet MCU Adafruit Feather M0 with RFM95 LoRa Radio 3178 Adafruit Store Sensor Sensirion/Adafruit SHT45 5665 Adafruit Store Battery PKCELL Lithium Ion 3.7v 2200mAh 1781 Adafruit Store PCB Custom built PCB Designed in house, manufactured with PCBWay N/A PCB Files Here"},{"location":"#server","title":"Server","text":"<p>We used an Ubuntu VPS server for the project, running Ubuntu 20 hosted with BinaryLane. The server utilized 4VCPUs with 8GB RAM and 100GB disk space.</p>"},{"location":"publications/","title":"Publications &amp; News Articles","text":""},{"location":"publications/#publications","title":"Publications","text":"Title Citation (APA 7th Edition) Link A Digital Heat Early Warning System for Older Adults Oberai, M., Xu, Z., Bach, A., Forbes, C., Jackman, E., O\u2019Connor, F., Ennever, I., Binnewies, S., Baker, S., &amp; Rutherford, S. (2025). A digital heat early warning system for older adults. Npj Digital Medicine, 8(1), 114. https://doi.org/10.1038/s41746-025-01505-5 DOI Biophysical versus Machine Learning Models for Predicting Rectal and Skin Temperatures in Older Adults Forbes, C., Coccarelli, A., Xu, Z., Meade, R. D., Kenny, G. P., Binnewies, S., &amp; Bach, A. J. E. (2025). Biophysical versus machine learning models for predicting rectal and skin temperatures in older adults. Journal of Thermal Biology, 128, 104078. https://doi.org/10.1016/j.jtherbio.2025.104078 DOI Older Queenslanders\u2019 Behaviours During Hot Weather: Factors Impacting their Heat Response Actions Xu, Z., Oberai, M., Bach, A., Binniweis, S., Jackman, E., Forbes, C., Baker, S., Phung, D., &amp; Rutherford, S. (2023). Older Queenslanders\u2019 behaviours during hot weather: Factors impacting their heat response actions. ISEE Conference Abstracts, 2023, isee.2023.MP-162. https://doi.org/10.1289/isee.2023.MP-162 DOI Towards Improvement of Heatwave Warnings for Older Adults: The Case of Queensland Australia Oberai, M., Baker, S., Bach, A. J. E., Forbes, C., Jackman, E., Binnewies, S., Xu, Z., Cunningham, S., Nghiem, S., Phung, D., &amp; Rutherford, S. (2024). Towards Improvement of Heatwave Warnings for Older Adults: The Case of Queensland Australia. Journal of Primary Care &amp; Community Health, 15, 21501319241286584. https://doi.org/10.1177/21501319241286584 DOI"},{"location":"publications/#news-articles-media","title":"News Articles &amp; Media","text":"Publisher Title Link ABC New Weather-Sensing Technology Created to Stop 'Preventable' Heat-Related Fatalities in Queensland's Elderly ABC Website Griffith Climate Action The Ethos System: Phase 1 Testimonial YouTube Griffith Climate Action Heat Information Video Collection Part 1 Part 2 Part 3"},{"location":"ethos-base-station/","title":"Ethos Base Station","text":"<p>This repository stores the code which is run on the Raspberry Pi for the Ethos in home system trial.</p>"},{"location":"ethos-base-station/#contents","title":"Contents","text":"<ul> <li>Ethos Base Station</li> <li>Contents</li> <li>Tips<ul> <li>Show settings button</li> </ul> </li> <li>Installation and building<ul> <li>Development build</li> <li>Production build</li> </ul> </li> <li>Testing<ul> <li>Unit testing</li> <li>End-to-end testing</li> </ul> </li> <li>Application data structure<ul> <li>Data flow diagram</li> <li>Database types</li> <li>Sensor</li> <li>Weather</li> <li>Preferences</li> <li>Survey</li> <li>Alert</li> <li>Pinia store types</li> <li>Database store</li> <li>Data Preferences store</li> <li>Data Sensor store</li> <li>Data User store</li> <li>Date Time store</li> <li>Keyboard store</li> <li>Socket store</li> <li>Survey store</li> <li>Volume store</li> <li>Weather store</li> </ul> </li> </ul>"},{"location":"ethos-base-station/#tips","title":"Tips","text":""},{"location":"ethos-base-station/#show-settings-button","title":"Show settings button","text":"<p>To show the settings button, press the ethos logo (top left) 7 times in quick succession.</p>"},{"location":"ethos-base-station/#installation-and-building","title":"Installation and building","text":""},{"location":"ethos-base-station/#development-build","title":"Development build","text":"<p>Requirements: NPM, Yarn, Python 3.9 (with venv) and Docker</p> <ol> <li>Ensure Docker is open and running.</li> <li>Under <code>./javascript_ui</code> make a file named <code>.env</code> using the provided <code>.env.example</code> file and fill in all variables.</li> <li>Run install script <code>sh dev_install.sh</code> (Mac/Linux) or <code>.\\dev_install.bat</code> (Windows).</li> <li>To run development build run <code>sh dev_run.sh</code> (Mac/Linux) or <code>.\\dev_run.bat</code> (Windows).</li> <li>For testing, configure a User with ID of <code>999</code> and a password of <code>12345</code></li> </ol> <p>Note: If you get an error <code>CouchDB did not start in time</code> or <code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code>, make sure docker is running, either by launching the application or by running <code>sudo systemctl start docker</code> (Linux).</p>"},{"location":"ethos-base-station/#production-build","title":"Production build","text":"<p>Requirements: NPM, Yarn, Python 3.9 (with venv) and Git</p> <ol> <li>Image Raspberry Pi OS to an SD card using Raspberry Pi Imager. When setting up the user ensure the name is set to <code>pi</code>. This is important for automatic process startup with systemd</li> <li>Ensure that existing packages are up to date with <code>sudo apt update &amp;&amp; sudo apt -y upgrade</code></li> <li>(If required) Setup waveshare touchscreen divers by following these instructions</li> <li>Install nvm by using: <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</code></li> <li>Source terminal with <code>source ~/.bashrc</code></li> <li>Install node version 18 with <code>nvm install 18</code> and then activate it with <code>nvm use 18</code></li> <li>Install Yarn with <code>npm install --global yarn</code></li> <li>Ensure that Python is installed with <code>python3 --version</code>, and if not install it</li> <li>Navigate to the home directory with either <code>cd ~</code> or <code>cd /home/pi</code></li> <li>Clone the GitHub repository with <code>git clone git@github.com:climate-ethos/ethos-raspberry-pi.git</code></li> <li>Move into the newly created directory with <code>cd ethos-raspberry-pi</code></li> <li>Under <code>./javascript_ui</code> make a file named <code>.env</code> using the provided <code>.env.example</code> file and fill in all variables.</li> <li>Make all pi-related scripts executable with the command: <code>find . -maxdepth 1 -type f -name \"pi_*.sh\" -exec chmod +x {} \\;</code></li> <li>Install dependencies by running <code>sh pi_install.sh</code> (Pi). This will also setup auto-launch at startup and automatic updates with a cron job.</li> <li>Build production binary/Electron app using <code>sh pi_build.sh</code></li> <li>Run systemd services with <code>sh pi_run.sh</code> (Pi), or alternatively restart device.</li> </ol> <p>If this doesn't work you can try a manual launch with <code>pi_run_manual.sh</code> (Pi) for debugging.</p> <p>Important: Ensure that the application is cloned in the home directory (<code>~/ethos-raspberry-pi</code>). Otherwise systemd services will not work. The system has been designed with Python 3.9 and Node 18 so if any errors arise check the versions of those two services first.</p>"},{"location":"ethos-base-station/#testing","title":"Testing","text":""},{"location":"ethos-base-station/#unit-testing","title":"Unit testing","text":"<p>Requirements: NPM, Yarn and Python 3.9 (with venv)</p> <ol> <li>Run executable with <code>sh dev_tests_unit.sh</code> (Mac/Linux)</li> </ol>"},{"location":"ethos-base-station/#end-to-end-testing","title":"End-to-end testing","text":"<p>Requirements: NPM, Yarn, Python 3.9 (with venv) and Docker</p> <ol> <li>Run executable with <code>sh dev_tests_e2e.sh</code> (Mac/Linux).</li> </ol>"},{"location":"ethos-base-station/#application-data-structure","title":"Application data structure","text":""},{"location":"ethos-base-station/#data-flow-diagram","title":"Data flow diagram","text":"<p>Each data type shown in the diagram is explained below:</p>"},{"location":"ethos-base-station/#database-types","title":"Database types","text":"<p>Definitions for the structure can be found in <code>javascript_ui/src/typings/database-types.d.ts</code>. The database is used to store historical data which may be useful for research purposes. Each row in the database corresponds to a historical record of one of the following types:</p>"},{"location":"ethos-base-station/#sensor","title":"Sensor","text":"<pre><code>{\n  type: 'sensor';\n  time: Date;\n  userId: string;\n  sensorLocation: string | undefined;\n  sensorId: number | undefined;\n  temperature: number | undefined;\n  humidity: number | undefined;\n  coreTemperatureDelta: number | undefined;\n}\n</code></pre>"},{"location":"ethos-base-station/#weather","title":"Weather","text":"<pre><code>{\n  type: 'weather';\n  time: Date;\n  userId: string;\n  weatherLocation: string | null;\n  temperature: number | null;\n  humidity: number | null;\n}\n</code></pre>"},{"location":"ethos-base-station/#preferences","title":"Preferences","text":"<pre><code>{\n  type: 'preferences';\n  time: Date;\n  userId: string;\n  audioType: AudioType;\n  isFollowUp: boolean;\n  coolingStrategyOptions: Array&lt;{\n    key: string;\n    haveAccessTo: boolean;\n    wouldUse: boolean;\n    whyNotUse: Array&lt;string&gt;;\n    whyNotUseOther: string;\n  }&gt;;\n}\n</code></pre>"},{"location":"ethos-base-station/#survey","title":"Survey","text":"<pre><code>{\n  type: 'survey';\n  time: Date;\n  userId: string;\n  wasHome: undefined | boolean;\n  coolingStrategiesUsed: Array&lt;string&gt;;\n  howEffective: undefined | number;\n}\n</code></pre>"},{"location":"ethos-base-station/#alert","title":"Alert","text":"<pre><code>{\n  type: 'alert';\n  time: Date;\n  userId: string;\n  riskLevel: RiskLevel | undefined;\n  volumePercent: number;\n  dismissMethod: null | 'not here' | 'cooling strategies' | 'dismiss';\n}\n</code></pre>"},{"location":"ethos-base-station/#pinia-store-types","title":"Pinia store types","text":"<p>This is the structure of the state which is stored in the pinia store. The pinia store is used for live data which directly affects the UI or application logic.</p>"},{"location":"ethos-base-station/#database-store","title":"Database store","text":"<p>The database store is designed to provide centralized access and actions related to a PouchDB database and its replication to a CouchDB instance.</p> <ul> <li> <p><code>db</code>: Holds the instance of the PouchDB local database.</p> </li> <li> <p><code>replicationHandler</code>: Holds the replication handler instance, which is responsible for replicating the PouchDB instance to a remote CouchDB database.</p> </li> <li> <p><code>replicationStatus</code>: Provides the current status of the replication process. Can be one of the following values:</p> </li> <li><code>initial</code></li> <li><code>active</code></li> <li><code>paused</code></li> <li><code>denied</code></li> <li><code>complete</code></li> <li><code>error</code></li> </ul>"},{"location":"ethos-base-station/#data-preferences-store","title":"Data Preferences store","text":"<p>The Data Preferences store manages user preferences related to audio types, follow-up settings, and cooling strategy options.</p> <ul> <li> <p><code>audioType</code>: Specifies the type of audio that will be used. It can be one of the enumerated values from <code>AudioType</code> (e.g., <code>AudioType.TONE</code>).</p> </li> <li> <p><code>isFollowUp</code>: A boolean flag to indicate if the user wishes to follow up with a focus group discussion.</p> </li> <li> <p><code>coolingStrategyOptions</code>: An array of objects representing the various cooling strategies. Each object contains a key, which is the identifier for the strategy, and several other options like <code>haveAccessTo</code> and <code>wouldUse</code>.</p> </li> </ul> <p>The <code>coolingStrategyOptions</code> array is generated dynamically based on keys from the <code>coolingStrategies</code> helper, and each strategy option object is set to default values as defined in <code>defaultOptions</code>.</p>"},{"location":"ethos-base-station/#data-sensor-store","title":"Data Sensor store","text":"<p>The Data Sensor store is designed to manage sensor data, including alert states and other sensor-related metrics.</p> <ul> <li> <p><code>alertSensor</code>: Holds the sensor data for the current alert. It is of type <code>SensorData</code> which includes fields like <code>id</code>, <code>name</code>, <code>temperature</code>, etc.</p> </li> <li> <p><code>allSensorData</code>: An array that contains objects of type <code>SensorData</code>. Each object holds information about a sensor including its <code>id</code>, <code>name</code>, <code>temperature</code>, <code>humidity</code>, <code>lastSeen</code>, <code>coreTemperatureDelta</code>, and <code>riskLevel</code>.</p> </li> <li><code>id</code>: Sensor identification number.</li> <li><code>name</code>: Sensor name (in this case where it is located).</li> <li><code>temperature</code>: Current temperature data from the sensor (in degrees Celsius).</li> <li><code>humidity</code>: Current humidity data from the sensor (relative humidity).</li> <li><code>lastSeen</code>: The most recent time the sensor was active.</li> <li><code>coreTemperatureDelta</code>: Calculated change of core temperature from baseline, using the JOS-3 model.</li> <li><code>riskLevel</code>: Calculated risk level based on core temperature.</li> </ul> <p>The <code>allSensorData</code> array is initialized with four sensor objects, each having their fields set to <code>undefined</code>.</p>"},{"location":"ethos-base-station/#data-user-store","title":"Data User store","text":"<p>The Data User store is designed to manage user-related data, such as geographic location, biometric details, and sex. This is used for calculating core temperature.</p> <ul> <li><code>id</code>: Holds the ID of the user which is used to connect to the database and store info</li> <li><code>password</code>: Stores the password for the associated user ID to connect tot the database</li> <li> <p><code>postcode</code>: Holds the postcode of the user.</p> </li> <li> <p><code>latitude</code>: Holds the latitude coordinate corresponding to the user's postcode.</p> </li> <li> <p><code>longitude</code>: Holds the longitude coordinate corresponding to the user's postcode.</p> </li> <li> <p><code>ageYears</code>: Holds the age of the user in years.</p> </li> <li> <p><code>heightCm</code>: Holds the height of the user in centimetres.</p> </li> <li> <p><code>weightKg</code>: Holds the weight of the user in kilograms.</p> </li> <li> <p><code>sex</code>: Holds the sex of the user. Can be either: 'female', 'male' or 'other'.</p> </li> </ul>"},{"location":"ethos-base-station/#date-time-store","title":"Date Time store","text":"<p>The Date Time store is designed to manage date and time-related data. It updates this data periodically.</p> <ul> <li><code>currentDate</code>: Holds the current date and time as a JavaScript <code>Date</code> object.</li> </ul>"},{"location":"ethos-base-station/#keyboard-store","title":"Keyboard store","text":"<p>The Keyboard store is designed to manage the virtual keyboard behavior and settings in the application. This includes what input the keyboard is bound to, its current value, type, and dimensions.</p> <ul> <li> <p><code>keyboardBinding</code>: Holds the HTMLInputElement that the keyboard is currently bound to. Used to refocus the input. Can be either <code>undefined</code> or an instance of <code>HTMLInputElement</code>.</p> </li> <li> <p><code>keyboardValue</code>: Holds the value to which the keyboard is currently bound. Can be either <code>undefined</code> or an object with a <code>value</code> property of type <code>string</code>.</p> </li> <li> <p><code>keyboardType</code>: Specifies the type of the keyboard. Can be either <code>'text'</code> or <code>'number'</code>.</p> </li> <li> <p><code>keyboardHeight</code>: Holds the height of the keyboard in pixels. Can be either <code>undefined</code> or a <code>number</code>.</p> </li> </ul>"},{"location":"ethos-base-station/#socket-store","title":"Socket store","text":"<p>The Socket store is designed to manage the real-time communication between the client and the server using Socket.io. This includes tracking the state of the connection and the socket instance itself.</p> <ul> <li> <p><code>isConnected</code>: A boolean flag that indicates whether the socket connection is currently established. Defaults to <code>false</code>.</p> </li> <li> <p><code>socket</code>: Holds the instance of the Socket.io client connected to the server. This is the socket that is responsible for emitting and listening to real-time events. Can be either <code>null</code> or an instance of <code>Socket&lt;ServerToClientEvents, ClientToServerEvents&gt;</code>.</p> </li> </ul>"},{"location":"ethos-base-station/#survey-store","title":"Survey store","text":"<p>The Survey store is designed to manage the user survey data and logic. This includes tracking the number of alerts that have occurred since the last survey, storing the user's answers to the survey questions, and determining whether the survey modal should be displayed.</p> <ul> <li> <p><code>alertsSinceLastSurvey</code>: An integer that keeps track of the number of alerts that have occurred since the last survey was displayed. Starts from 0.</p> </li> <li> <p><code>alertsInLastTimePeriod</code>: An integer that holds the number of alerts that have occurred in the last specified time period. This is used to display the number of alerts to the user when showing the survey.</p> </li> <li> <p><code>isShowSurveyModal</code>: A boolean flag that indicates whether the survey modal should be shown. Defaults to <code>false</code>.</p> </li> <li> <p><code>surveyAnswers</code>: An object that holds the user's answers to the survey questions. It follows the structure of <code>SurveyDatabaseStructure</code>, and includes:</p> </li> <li><code>wasHome</code>: Can be either <code>undefined</code> or a boolean indicating whether the user was home.</li> <li><code>coolingStrategiesUsed</code>: An array that stores the cooling strategies used by the user.</li> <li><code>howEffective</code>: Can be either <code>undefined</code> or a value indicating how effective the cooling strategies were.</li> </ul>"},{"location":"ethos-base-station/#volume-store","title":"Volume store","text":"<p>The Volume store is designed to manage the volume settings in the application. This includes tracking the current volume value and providing the capability to increase or decrease it.</p> <ul> <li><code>volumeValue</code>: An integer that holds the current value of the volume. This value is bounded between 0 and <code>maxVolume</code> (5 by default).</li> </ul>"},{"location":"ethos-base-station/#weather-store","title":"Weather store","text":"<p>The Weather store is designed to manage the weather-related data and forecast for the user. It provides functionalities like fetching current weather conditions and detailed forecasts based on the user's latitude and longitude.</p> <ul> <li> <p><code>isShowDetailedForecast</code>: A boolean value indicating whether to show the detailed forecast modal or not.</p> </li> <li> <p><code>errorMessage</code>: A string that holds any error message generated during the data fetching process. Initially set to 'Updating data...'.</p> </li> <li> <p><code>stationName</code>: A string or null that holds the name of the weather station from where the weather data is fetched.</p> </li> <li> <p><code>currentTemp</code>: A number or null that holds the current temperature in metric units.</p> </li> <li> <p><code>currentHumidity</code>: A number or null that holds the current humidity level.</p> </li> <li> <p><code>weatherDescription</code>: A string or undefined that holds a textual description of the current weather conditions, e.g., \"clear sky\".</p> </li> <li> <p><code>weatherIconId</code>: A string or null that holds the icon ID for the current weather conditions. This ID is used to display the corresponding weather icon.</p> </li> <li> <p><code>forecastTemps</code>: An array of objects or null that holds the detailed forecast data. Each object contains the <code>date</code> (as a JavaScript Date object) and the <code>temperature</code> (as a number in metric units).</p> </li> <li> <p><code>pollInterval</code>: A number or null that specifies the current interval to update weather</p> </li> </ul>"},{"location":"ethos-temperature-sensor/","title":"Ethos Temperature Sensor","text":"<p>This is the code which runs on the Feather M0 board to send temperature sensor data to the base station.</p>"},{"location":"ethos-temperature-sensor/#installationsetup","title":"Installation/Setup","text":"<ol> <li>Install the required libraries from the Arduino IDE</li> <li>Copy <code>conf.h.example</code> -&gt; <code>conf.h</code> and add your 16 bit radio encryption key</li> <li>Upload code to Feather M0 LoRa board with temperature sensor</li> </ol>"},{"location":"ethos-temperature-sensor/#automatic-upload-script","title":"Automatic upload script","text":"<ol> <li>Install the Arduino CLI (instructions here)</li> <li>Run the setup script with <code>sh arduino_cli_setup.sh</code> or <code>arduino_cli_setup.bat</code> (Windows)</li> <li>Ensure all libraries are in the <code>Arduino/libraries</code> path</li> <li>(On MacOS) run <code>brew install gnu-sed</code></li> <li>Run the upload script with <code>sh mac_sensor_upload.sh</code> or <code>windows_sensor_upload.bat</code></li> <li>Plug in a device and double tap reset button to allow upload</li> </ol>"},{"location":"ethos-temperature-sensor/#arduino-ide-setup","title":"Arduino IDE Setup","text":"<ol> <li>Add the additional board manager url <code>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json</code></li> <li>Install the <code>Arduino SAMD Boards</code> from the boards manager.</li> <li>Install the <code>Adafruit SAMD Boards</code> from the boards manager.</li> <li>Select the matching board: <code>Adafruit Feather M0 (SAMD21)</code>.</li> </ol>"},{"location":"ethos-temperature-sensor/#arduino-cli-setup-manual","title":"Arduino CLI Setup (Manual)","text":"<ol> <li>Verify installation with <code>arduino-cli version</code></li> <li>Initialize the Arduino CLI config with <code>arduino-cli config init</code></li> <li>Add the Adafruit board manager url with <code>arduino-cli config add board_manager.additional_urls https://adafruit.github.io/arduino-board-index/package_adafruit_index.json</code></li> <li>Install the Arduino SAMD Boards with <code>arduino-cli core install arduino:samd</code></li> <li>Install the Adafruit SAMD Boards with <code>arduino-cli core install arduino:samd</code></li> </ol>"},{"location":"ethos-server/","title":"Ethos Server","text":"<p>This repository stores the setup information needed to run the server for the Ethos project. The system uses Nginx for SSL termination and as a reverse proxy, with Certbot for automatic SSL certificate renewal.</p>"},{"location":"ethos-server/#nginx-endpoints","title":"NGINX Endpoints","text":"<p>The root path (<code>/</code>) redirects to CouchDB running on port 5984. The path (<code>/server/</code>) redirects to the Node.js instance (internally on HTTP port 8080).</p>"},{"location":"ethos-server/#sending-surveys-to-clients","title":"Sending surveys to clients","text":"<p>Surveys can be sent to clients by running: <code>curl -u user:password -d '{\"newValue\": true}' -H \"Content-Type: application/json\" -X POST https://your-domain.com/server/displayBomSurvey</code> (Replace <code>user:password</code> with your <code>USERNAME</code> and <code>PASSWORD</code> from <code>.env</code>, and <code>your-domain.com</code> with your actual domain if different).</p>"},{"location":"ethos-server/#installation-running","title":"Installation &amp; running","text":""},{"location":"ethos-server/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Docker: This repo requires a pre-existing installation of Docker. Rootless mode is recommended.</p> <ul> <li>Install Docker: <code>curl -fsSL https://get.docker.com -o get-docker.sh</code> and then <code>sudo sh ./get-docker.sh</code>.</li> <li>For rootless Docker (refer to official Docker docs for the most up-to-date instructions):<ol> <li>Install prerequisites: <code>sudo apt-get update &amp;&amp; sudo apt-get install -y dbus-user-session uidmap systemd-container fuse-overlayfs</code></li> <li>Allow low-port binding for rootless user (e.g., for ports 80, 443): Add <code>net.ipv4.ip_unprivileged_port_start=80</code> to <code>/etc/sysctl.conf</code> then run <code>sudo sysctl -p</code>.</li> <li>Create a dedicated user: <code>sudo adduser docker-user</code></li> <li>Disable system-wide Docker: <code>sudo systemctl disable --now docker.service docker.socket</code>, <code>sudo rm -f /var/run/docker.sock</code>.</li> <li>Log in as the <code>docker-user</code>: <code>sudo machinectl shell docker-user@</code> (or <code>su - docker-user</code>).</li> <li>Install rootless Docker: <code>dockerd-rootless-setuptool.sh install</code>.</li> <li>Start user Docker service: <code>systemctl --user start docker</code>.</li> <li>Enable linger for the user: <code>sudo loginctl enable-linger docker-user</code>. More information: Docker Rootless Mode Docs</li> </ol> </li> </ul> </li> <li> <p>Node.js Server Configuration: Ensure your Node.js application (the <code>server</code> service) is configured to listen on HTTP port 8080. It should not attempt to handle HTTPS itself.</p> </li> </ol>"},{"location":"ethos-server/#one-time-ssl-setup-for-nginx","title":"One-Time SSL Setup (for Nginx)","text":"<ol> <li> <p>Generate DH Parameters: This strengthens SSL. It can take a few minutes.</p> <pre><code>openssl dhparam -out ./certbot/conf/ssl-dhparams.pem 2048\n</code></pre> </li> <li> <p>Configure SSL Options File (<code>./nginx/ssl_common/options-ssl-nginx.conf</code>):     Use a strong configuration. You can generate one from the Mozilla SSL Configuration Generator. Select Nginx, your server version, and \"Modern\" compatibility.     Example content for <code>./nginx/ssl_common/options-ssl-nginx.conf</code>:</p> <pre><code># Modern configuration, tweak as necessary\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\nssl_prefer_server_ciphers off;\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 1d;\nssl_session_tickets off;\n</code></pre> </li> </ol>"},{"location":"ethos-server/#running-the-server","title":"Running the server","text":"<ol> <li>(If running docker rootless) Login to your <code>docker-user</code> account: <code>sudo machinectl shell docker-user@</code></li> <li>Clone this repository.</li> <li>Navigate into the cloned directory.</li> <li>Copy <code>.env.example</code> to <code>.env</code> (<code>cp .env.example .env</code>) and fill out all the fields (<code>nano .env</code>).<ul> <li>Ensure <code>COUCHDB_ADMIN_USER</code>, <code>COUCHDB_ADMIN_PASSWORD</code>, <code>REDIS_PASSWORD</code>, <code>USERNAME</code>, <code>PASSWORD</code> etc. are set.</li> </ul> </li> <li>Configure <code>./nginx/conf/nginx.conf</code> with your correct domain name for <code>$primary_domain</code>.</li> <li> <p>Initial Certificate Generation (First Time Only):</p> <ul> <li> <p>Start Nginx temporarily to serve the ACME challenge:</p> <pre><code>docker compose -p ethos-server --profile prod up -d nginx\n</code></pre> </li> <li> <p>Run Certbot to obtain certificates. Replace <code>your-email@example.com</code> with your actual email and <code>your-domain.com</code> with your domain:</p> <pre><code>docker compose --profile prod run --rm certbot certonly \\\n  --webroot \\\n  --webroot-path /var/www/certbot/ \\\n  -d your-domain.com -d www.your-domain.com \\\n  --email your-email@example.com \\\n  --agree-tos --no-eff-email \\\n  --force-renewal # Use --force-renewal only if re-running for existing domains and need to force it\n</code></pre> </li> <li> <p>If successful, Nginx (which is already running) should now have the certs. You can stop it and restart all services, or just proceed.</p> <pre><code># Optional: docker compose --profile prod stop nginx\n</code></pre> </li> </ul> </li> <li> <p>Start all services (including Nginx with certs, and Certbot for auto-renewal):     The <code>prod_start_server.sh</code> or <code>dev_start_server.sh</code> scripts can handle starting services for you.     Alternatively a general command for production:</p> <pre><code>docker compose -p ethos-server --profile prod up -d\n</code></pre> <p><code>-p ethos-server</code> sets a consistent project name which is needed for the certbot entrypoint script to reload nginx</p> </li> </ol>"},{"location":"ethos-server/#configuring-couchdb-users","title":"Configuring CouchDB users","text":"<ol> <li>Copy <code>users.csv.example</code> to <code>users.csv</code> and populate the file with usernames and passwords.</li> <li>Run <code>sh prod_create_users_from_csv.sh</code> to create CouchDB users and views. This script likely runs a command like <code>docker compose exec couchdb ...</code> or similar.</li> </ol>"},{"location":"ethos-server/#api-endpoints","title":"API Endpoints","text":""},{"location":"ethos-server/#authentication","title":"Authentication","text":"<p>All endpoints marked with <code>[AUTH]</code> require authentication using the <code>authMiddleware</code>.</p> <p>All endpoints marked with <code>[AUTHDB]</code> require authentication against the couchdb database. The authenticated user's identity must match the <code>identity</code> or <code>userId</code> provided in the request body for applicable endpoints.</p>"},{"location":"ethos-server/#survey-display","title":"Survey Display","text":""},{"location":"ethos-server/#get-bom-survey-display-status","title":"Get BOM Survey Display Status","text":"<ul> <li>URL: <code>/displayBomSurvey</code></li> <li>Method: GET</li> <li>Description: Retrieves the current status of whether to display a BOM survey.</li> <li>Response:</li> </ul> <pre><code>{\n  \"displaySurvey\": boolean\n}\n</code></pre>"},{"location":"ethos-server/#update-bom-survey-display-status-auth","title":"Update BOM Survey Display Status [AUTH]","text":"<ul> <li>URL: <code>/displayBomSurvey</code></li> <li>Method: POST</li> <li>Description: Updates the BOM survey display status.</li> <li>Body:</li> </ul> <pre><code>{\n  \"newValue\": boolean\n}\n</code></pre> <ul> <li>Response: String confirming the update.</li> </ul>"},{"location":"ethos-server/#get-user-bom-survey-display-status-authdb","title":"Get User BOM Survey Display Status [AUTHDB]","text":"<ul> <li>URL: <code>/displayUserHeatSurvey</code></li> <li>Method: GET</li> <li>Description: Retrieves the current status of whether to display a BOM survey for given user passed in credentials.</li> <li>Response:</li> </ul> <pre><code>{\n  \"displaySurvey\": boolean\n}\n</code></pre>"},{"location":"ethos-server/#update-user-bom-survey-display-status-authdb","title":"Update User BOM Survey Display Status [AUTHDB]","text":"<ul> <li>URL: <code>/displayUserHeatSurvey</code></li> <li>Method: POST</li> <li>Description: Updates the BOM survey display status of current user passed in credentials.</li> <li>Body:</li> </ul> <pre><code>{\n  \"newValue\": boolean\n}\n</code></pre> <ul> <li>Response: String confirming the update.</li> </ul>"},{"location":"ethos-server/#get-user-heat-survey-display-status-authdb","title":"Get User Heat Survey Display Status [AUTHDB]","text":"<ul> <li>URL: <code>/displayUserHeatSurvey</code></li> <li>Method: GET</li> <li>Description: Retrieves the current status of whether to display a Heat Alert survey for given user passed in credentials.</li> <li>Response:</li> </ul> <pre><code>{\n  \"displaySurvey\": boolean\n}\n</code></pre>"},{"location":"ethos-server/#update-user-heat-survey-display-status-authdb","title":"Update User Heat Survey Display Status [AUTHDB]","text":"<ul> <li>URL: <code>/displayUserHeatSurvey</code></li> <li>Method: POST</li> <li>Description: Updates the Heat Alert survey display status of current user passed in credentials.</li> <li>Body:</li> </ul> <pre><code>{\n  \"newValue\": boolean\n}\n</code></pre> <ul> <li>Response: String confirming the update.</li> </ul>"},{"location":"ethos-server/#device-registration","title":"Device Registration","text":""},{"location":"ethos-server/#register-device-authdb","title":"Register Device [AUTHDB]","text":"<ul> <li>URL: <code>/registerDevice</code></li> <li>Method: POST</li> <li>Description: Registers a device for push notifications. If device is undefined, it will default to iOS. Set tag as 'research_participant' for those users who will be receiving surveys.</li> <li>Body:</li> </ul> <pre><code>{\n  \"identity\": string,\n  \"address\": string,\n  \"tag\": \"research_participant\" | undefined,\n  \"device\": \"android\" | \"ios\" | undefined\n}\n</code></pre> <ul> <li>Response: String confirming registration.</li> </ul>"},{"location":"ethos-server/#remove-device-authdb","title":"Remove Device [AUTHDB]","text":"<ul> <li>URL: <code>/removeDevice</code></li> <li>Method: POST</li> <li>Description: Removes a device for push notifications.</li> <li>Body:</li> </ul> <pre><code>{\n  \"identity\": string,\n  \"address\": string,\n}\n</code></pre> <ul> <li>Response: String confirming removal.</li> </ul>"},{"location":"ethos-server/#push-notifications","title":"Push Notifications","text":""},{"location":"ethos-server/#send-alert-push-notification-authdb","title":"Send Alert Push Notification [AUTHDB]","text":"<ul> <li>URL: <code>/sendAlertPushNotification</code></li> <li>Method: POST</li> <li>Description: Sends a heat alert push notification to a registered device.</li> <li>Body:</li> </ul> <pre><code>{\n  \"identity\": string,\n  \"roomName\": string,\n  \"severity\": \"medium\" | \"high\"\n}\n</code></pre> <ul> <li>Response: String confirming the notification was sent.</li> </ul>"},{"location":"ethos-server/#send-survey-push-notification-authdb","title":"Send Survey Push Notification [AUTHDB]","text":"<ul> <li>URL: <code>/sendSurveyPushNotification</code></li> <li>Method: POST</li> <li>Description: Sends a survey push notification to a registered device.</li> <li>Body:</li> </ul> <pre><code>{\n  \"identity\": string,\n  \"surveyType\": \"alert\" | \"bom\" | \"both\"\n}\n</code></pre> <ul> <li>Response: String confirming the notification was sent.</li> </ul>"},{"location":"ethos-server/#sms-notifications","title":"SMS Notifications","text":""},{"location":"ethos-server/#send-sms-notification-authdb","title":"Send SMS Notification [AUTHDB]","text":"<ul> <li>URL: <code>/sendSMSNotification</code></li> <li>Method: POST</li> <li>Description: Sends an SMS notification.</li> <li>Body:</li> </ul> <pre><code>{\n  \"userId\": string | number,\n  \"phoneNumber\": string,\n  \"roomName\": string,\n  \"severity\": \"medium\" | \"high\"\n}\n</code></pre> <ul> <li>Response: String confirming the SMS was sent.</li> </ul>"},{"location":"ethos-server/#notes","title":"Notes","text":"<ul> <li>All authenticated routes require a valid authentication token to be included in the request header.</li> <li>For endpoints that require an <code>identity</code> or <code>userId</code> in the request body, this <code>identity</code> must match the authenticated user's identity.</li> <li>Error responses will include appropriate HTTP status codes and error messages.</li> <li>The <code>sendPushNotification</code> and <code>sendSMS</code> functions are available for use within the application but are not directly exposed as API endpoints.</li> </ul>"}]}